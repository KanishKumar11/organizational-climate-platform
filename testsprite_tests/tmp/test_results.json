[
  {
    "projectId": "f8d0cbdf-55fa-41e2-b875-d38006194387",
    "testId": "a677a394-94a1-4cbd-9063-eea424bd3160",
    "userId": "64c80428-50b1-7024-fac8-0ba8c0dc95d6",
    "title": "TC001-post apiauthregister user registration",
    "description": "Test the user registration endpoint to ensure it correctly registers a new user with valid email, password, name, and role. Verify that invalid inputs are rejected with appropriate error messages.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:3000\"\nAUTH_EMAIL = \"77kanish@gmail.com\"\nAUTH_PASSWORD = \"kanish@7.7\"\nTIMEOUT = 30\n\ndef test_post_apiauthregister_user_registration():\n    url = f\"{BASE_URL}/api/auth/register\"\n    auth = HTTPBasicAuth(AUTH_EMAIL, AUTH_PASSWORD)\n\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Valid user data\n    valid_user = {\n        \"email\": \"testuser_valid@example.com\",\n        \"password\": \"StrongPass1!\",\n        \"name\": \"Test User\",\n        \"role\": \"employee\"\n    }\n\n    # Invalid user data cases for validation\n    invalid_users = [\n        # Invalid email format\n        {\n            \"email\": \"invalid-email\",\n            \"password\": \"StrongPass1!\",\n            \"name\": \"Test User\",\n            \"role\": \"employee\"\n        },\n        # Password too short\n        {\n            \"email\": \"testuser_shortpass@example.com\",\n            \"password\": \"short\",\n            \"name\": \"Test User\",\n            \"role\": \"employee\"\n        },\n        # Missing name\n        {\n            \"email\": \"testuser_noname@example.com\",\n            \"password\": \"StrongPass1!\",\n            \"role\": \"employee\"\n        },\n        # Invalid role\n        {\n            \"email\": \"testuser_invalidrole@example.com\",\n            \"password\": \"StrongPass1!\",\n            \"name\": \"Test User\",\n            \"role\": \"invalid_role\"\n        }\n    ]\n\n    created_user_emails = []\n\n    try:\n        # Test valid registration\n        resp = requests.post(url, json=valid_user, auth=auth, headers=headers, timeout=TIMEOUT)\n        assert resp.status_code == 201, f\"Expected 201, got {resp.status_code} for valid user registration\"\n        created_user_emails.append(valid_user[\"email\"])\n\n        # Test invalid registrations\n        for invalid_user in invalid_users:\n            resp = requests.post(url, json=invalid_user, auth=auth, headers=headers, timeout=TIMEOUT)\n            assert resp.status_code == 400, (\n                f\"Expected 400 for invalid input but got {resp.status_code} for data: {invalid_user}\"\n            )\n            assert resp.text and len(resp.text) > 0, \"Expected error message in response body for invalid input\"\n\n    finally:\n        # Cleanup: delete created users if any were registered successfully\n        for email in created_user_emails:\n            try:\n                # We need to find the user ID by email via API (assuming an admin users endpoint)\n                search_url = f\"{BASE_URL}/api/admin/users\"\n                params = {\"search\": email}\n                resp = requests.get(search_url, auth=auth, headers=headers, params=params, timeout=TIMEOUT)\n                if resp.status_code == 200:\n                    users = resp.json()\n                    if isinstance(users, list):\n                        # Find user with exact email match\n                        user = next((u for u in users if u.get(\"email\") == email), None)\n                        if user and \"id\" in user:\n                            user_id = user[\"id\"]\n                            delete_url = f\"{BASE_URL}/api/admin/users/{user_id}\"\n                            del_resp = requests.delete(delete_url, auth=auth, headers=headers, timeout=TIMEOUT)\n                            assert del_resp.status_code == 200, f\"User deletion failed with status {del_resp.status_code}\"\n            except Exception:\n                # If deletion fails, skip silently\n                pass\n\ntest_post_apiauthregister_user_registration()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 94, in <module>\n  File \"<string>\", line 61, in test_post_apiauthregister_user_registration\nAssertionError: Expected 201, got 404 for valid user registration\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T10:17:44.333Z",
    "modified": "2025-10-08T10:18:18.632Z"
  },
  {
    "projectId": "f8d0cbdf-55fa-41e2-b875-d38006194387",
    "testId": "3adccedd-1401-4c75-b3e6-e9e786a3cb57",
    "userId": "64c80428-50b1-7024-fac8-0ba8c0dc95d6",
    "title": "TC002-get apiadminusers list users with filters",
    "description": "Test the user listing endpoint with pagination, search, role, and department filters to verify it returns the correct subset of users and handles edge cases like empty results.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\nAUTH_TOKEN = \"Bearer your_valid_token_here\"  # Replace with valid token for testing\n\nheaders = {\n    \"Accept\": \"application/json\",\n    \"Authorization\": AUTH_TOKEN\n}\n\ndef test_tc002_get_apiadminusers_list_users_with_filters():\n    \"\"\"\n    Test the user listing endpoint with pagination, search, role, and department filters \n    to verify it returns the correct subset of users and handles edge cases like empty results.\n    \"\"\"\n    url = f\"{BASE_URL}/api/admin/users\"\n\n    # Test with pagination: page 1, limit 5\n    params = {\"page\": 1, \"limit\": 5}\n    try:\n        response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Unexpected status code {response.status_code} for pagination test\"\n        data = response.json()\n        assert isinstance(data, dict), \"Response should be a JSON object/dict\"\n        assert \"users\" in data or \"data\" in data or isinstance(data, list), \"Response doesn't contain users list\"\n    except Exception as e:\n        raise AssertionError(f\"Pagination filter test failed: {e}\")\n\n    # Test with search filter: search a likely nonexistent string to get empty result\n    params = {\"search\": \"unlikelysearchterm1234567890\"}\n    try:\n        response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Unexpected status code {response.status_code} for search filter test\"\n        data = response.json()\n        users_list = None\n        if isinstance(data, dict):\n            if \"users\" in data:\n                users_list = data[\"users\"]\n            elif \"data\" in data:\n                users_list = data[\"data\"]\n            else:\n                users_list = []\n        elif isinstance(data, list):\n            users_list = data\n        else:\n            users_list = []\n\n        assert (isinstance(users_list, list) and len(users_list) == 0) or users_list == [], \\\n            \"Expected empty user list for unlikely search term\"\n    except Exception as e:\n        raise AssertionError(f\"Search filter test failed: {e}\")\n\n    # Test with role filter: use a valid role, e.g. \"employee\"\n    params = {\"role\": \"employee\", \"limit\": 10}\n    try:\n        response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Unexpected status code {response.status_code} for role filter test\"\n        data = response.json()\n        users_list = None\n        if isinstance(data, dict):\n            users_list = data.get(\"users\") or data.get(\"data\") or []\n        elif isinstance(data, list):\n            users_list = data\n        else:\n            users_list = []\n\n        if users_list:\n            for user in users_list:\n                assert user.get(\"role\") == \"employee\", f\"User role mismatch, expected 'employee', got {user.get('role')}\"\n    except Exception as e:\n        raise AssertionError(f\"Role filter test failed: {e}\")\n\n    # Test with department_id filter: first retrieve departments to get an existing department id\n    departments_url = f\"{BASE_URL}/api/admin/departments\"\n    try:\n        resp_depts = requests.get(departments_url, headers=headers, timeout=TIMEOUT)\n        assert resp_depts.status_code == 200, f\"Failed to get departments for department filter test\"\n        departments = resp_depts.json()\n        department_id = None\n        if isinstance(departments, dict):\n            depts_list = departments.get(\"departments\") or departments.get(\"data\") or []\n            if depts_list and isinstance(depts_list, list):\n                department_id = depts_list[0].get(\"id\") or depts_list[0].get(\"_id\")\n        elif isinstance(departments, list) and len(departments) > 0:\n            department_id = departments[0].get(\"id\") or departments[0].get(\"_id\")\n\n        if not department_id:\n            # If no department found, skip this subtest without exiting test\n            pass\n        else:\n            params = {\"department_id\": department_id, \"limit\": 10}\n            response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)\n            assert response.status_code == 200, f\"Unexpected status code {response.status_code} for department filter test\"\n            data = response.json()\n            users_list = None\n            if isinstance(data, dict):\n                users_list = data.get(\"users\") or data.get(\"data\") or []\n            elif isinstance(data, list):\n                users_list = data\n            else:\n                users_list = []\n\n            if users_list:\n                for user in users_list:\n                    user_dept_id = user.get(\"department_id\") or user.get(\"department\") or None\n                    assert user_dept_id == department_id, \\\n                        f\"User department_id mismatch: expected {department_id} got {user_dept_id}\"\n    except Exception as e:\n        raise AssertionError(f\"Department filter test failed: {e}\")\n\n\ntest_tc002_get_apiadminusers_list_users_with_filters()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 23, in test_tc002_get_apiadminusers_list_users_with_filters\nAssertionError: Unexpected status code 401 for pagination test\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 113, in <module>\n  File \"<string>\", line 28, in test_tc002_get_apiadminusers_list_users_with_filters\nAssertionError: Pagination filter test failed: Unexpected status code 401 for pagination test\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T10:17:44.341Z",
    "modified": "2025-10-08T10:19:03.365Z"
  },
  {
    "projectId": "f8d0cbdf-55fa-41e2-b875-d38006194387",
    "testId": "9b24ab66-9ef1-4bfc-8f81-c39bc8561c71",
    "userId": "64c80428-50b1-7024-fac8-0ba8c0dc95d6",
    "title": "TC003-post apiadminusers create new user",
    "description": "Test the user creation endpoint to ensure it creates a new user with valid name, email, role, and department_id, and returns success status.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\nAUTH_TOKEN = \"Bearer PLACEHOLDER_TOKEN\"  # Replace with valid token for the test environment\n\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": AUTH_TOKEN\n}\n\ndef test_post_apiadminusers_create_new_user():\n    # First, fetch existing departments to get a valid department_id for user creation\n    dep_url = f\"{BASE_URL}/api/admin/departments\"\n    try:\n        dep_resp = requests.get(dep_url, headers=headers, timeout=TIMEOUT)\n        dep_resp.raise_for_status()\n        departments = dep_resp.json()\n        assert isinstance(departments, list), \"Expected list of departments\"\n        assert len(departments) > 0, \"No departments available to assign user\"\n        department_id = departments[0].get(\"id\") or departments[0].get(\"_id\") or departments[0].get(\"department_id\")\n        if not department_id and isinstance(departments[0], dict):\n            for k,v in departments[0].items():\n                if isinstance(v, str):\n                    department_id = v\n                    break\n        assert department_id, \"Could not extract department_id from department data\"\n    except Exception as e:\n        raise AssertionError(f\"Failed to fetch departments: {e}\")\n\n    user_payload = {\n        \"name\": \"Test User TC003\",\n        \"email\": \"testuser_tc003@example.com\",\n        \"role\": \"employee\",\n        \"department_id\": department_id\n    }\n\n    user_url = f\"{BASE_URL}/api/admin/users\"\n    created_user_id = None\n    try:\n        resp = requests.post(user_url, json=user_payload, headers=headers, timeout=TIMEOUT)\n        assert resp.status_code == 201, f\"Expected status code 201, got {resp.status_code}\"\n        resp_json = resp.json()\n        if isinstance(resp_json, dict):\n            created_user_id = resp_json.get(\"id\") or resp_json.get(\"_id\")\n            assert created_user_id or (\"name\" in resp_json and \"email\" in resp_json), \"User creation response missing user identification\"\n        else:\n            raise AssertionError(\"User creation response JSON is not an object\")\n    except Exception as e:\n        raise AssertionError(f\"User creation failed: {e}\")\n    finally:\n        if created_user_id:\n            del_url = f\"{user_url}/{created_user_id}\"\n            try:\n                del_resp = requests.delete(del_url, headers=headers, timeout=TIMEOUT)\n                assert del_resp.status_code in [200, 204], f\"User deletion failed with status {del_resp.status_code}\"\n            except Exception as e:\n                raise AssertionError(f\"Cleanup failed: Could not delete created user: {e}\")\n\ntest_post_apiadminusers_create_new_user()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 17, in test_post_apiadminusers_create_new_user\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/admin/departments\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 60, in <module>\n  File \"<string>\", line 29, in test_post_apiadminusers_create_new_user\nAssertionError: Failed to fetch departments: 401 Client Error: Unauthorized for url: http://localhost:3000/api/admin/departments\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T10:17:44.346Z",
    "modified": "2025-10-08T10:18:51.155Z"
  },
  {
    "projectId": "f8d0cbdf-55fa-41e2-b875-d38006194387",
    "testId": "4f923365-d77d-417f-94d6-bda5f869595c",
    "userId": "64c80428-50b1-7024-fac8-0ba8c0dc95d6",
    "title": "TC004-put apiadminusersid update user by id",
    "description": "Test updating a user by ID to verify that user details can be modified correctly and the response confirms the update.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\n# TODO: Replace 'your_valid_access_token_here' with a valid access token with appropriate permissions\nTOKEN = \"your_valid_access_token_here\"\nHEADERS = {\"Authorization\": f\"Bearer {TOKEN}\", \"Content-Type\": \"application/json\"}\nTIMEOUT = 30\n\ndef test_put_apiadminusersid_update_user_by_id():\n    create_url = f\"{BASE_URL}/api/admin/users\"\n    update_user_url_template = f\"{BASE_URL}/api/admin/users/{{id}}\"\n    delete_url_template = f\"{BASE_URL}/api/admin/users/{{id}}\"\n\n    # Step 1: Create a new user to update\n    user_payload = {\n        \"name\": \"Test User Update\",\n        \"email\": \"testuserupdate@example.com\",\n        \"role\": \"employee\"\n    }\n    user_id = None\n\n    try:\n        response_create = requests.post(create_url, json=user_payload, headers=HEADERS, timeout=TIMEOUT)\n        assert response_create.status_code == 201, f\"User creation failed: {response_create.text}\"\n        user_data = response_create.json()\n        user_id = user_data.get(\"id\") or user_data.get(\"_id\")\n        assert user_id, \"Created user ID not found in response\"\n\n        # Step 2: Update the user by ID\n        update_payload = {\n            \"name\": \"Updated Test User\",\n            \"email\": \"updateduser@example.com\",\n            \"role\": \"leader\"\n        }\n        update_url = update_user_url_template.format(id=user_id)\n        response_update = requests.put(update_url, json=update_payload, headers=HEADERS, timeout=TIMEOUT)\n        assert response_update.status_code == 200, f\"User update failed: {response_update.text}\"\n        updated_user = response_update.json()\n\n        # Validate response confirms the update\n        assert updated_user.get(\"name\") == update_payload[\"name\"], \"User name not updated correctly\"\n        assert updated_user.get(\"email\") == update_payload[\"email\"], \"User email not updated correctly\"\n        assert updated_user.get(\"role\") == update_payload[\"role\"], \"User role not updated correctly\"\n    finally:\n        # Cleanup: delete the user if created\n        if user_id:\n            try:\n                delete_url = delete_url_template.format(id=user_id)\n                response_delete = requests.delete(delete_url, headers=HEADERS, timeout=TIMEOUT)\n                assert response_delete.status_code == 200, f\"User deletion failed: {response_delete.text}\"\n            except Exception:\n                pass\n\n\ntest_put_apiadminusersid_update_user_by_id()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 55, in <module>\n  File \"<string>\", line 24, in test_put_apiadminusersid_update_user_by_id\nAssertionError: User creation failed: {\"error\":\"Unauthorized\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T10:17:44.352Z",
    "modified": "2025-10-08T10:18:48.120Z"
  },
  {
    "projectId": "f8d0cbdf-55fa-41e2-b875-d38006194387",
    "testId": "c5efd463-4e9b-4876-8566-4bb670a6cfa5",
    "userId": "64c80428-50b1-7024-fac8-0ba8c0dc95d6",
    "title": "TC005-delete apiadminusersid delete user by id",
    "description": "Test deleting a user by ID to ensure the user is removed from the system and the response confirms deletion.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:3000\"\nAUTH = HTTPBasicAuth(\"77kanish@gmail.com\", \"kanish@7.7\")\nHEADERS = {\"Content-Type\": \"application/json\"}\nTIMEOUT = 30\n\n\ndef test_delete_apiadminusersid_delete_user_by_id():\n    user_payload = {\n        \"name\": \"Test User To Delete\",\n        \"email\": \"testuser.delete@example.com\",\n        \"role\": \"employee\"\n    }\n\n    created_user_id = None\n    try:\n        # Create a new user to delete\n        create_response = requests.post(\n            f\"{BASE_URL}/api/admin/users\",\n            auth=AUTH,\n            headers=HEADERS,\n            json=user_payload,\n            timeout=TIMEOUT\n        )\n        assert create_response.status_code == 201, f\"User creation failed: {create_response.text}\"\n        created_user = create_response.json()\n        created_user_id = created_user.get(\"id\") or created_user.get(\"_id\") or created_user.get(\"user_id\")\n        assert created_user_id, \"Created user ID not found in response\"\n\n        # Delete the created user\n        delete_response = requests.delete(\n            f\"{BASE_URL}/api/admin/users/{created_user_id}\",\n            auth=AUTH,\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n        assert delete_response.status_code == 200, f\"User deletion failed: {delete_response.text}\"\n\n        # Verify the user was deleted by trying to get user details or user list doesn't contain the user\n        # Assuming a GET /api/admin/users/{id} would return 404, or listing won't show the user\n        get_response = requests.get(\n            f\"{BASE_URL}/api/admin/users/{created_user_id}\",\n            auth=AUTH,\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n        # Expecting 404 or 400 for user not found after deletion, if 200 then fail test\n        assert get_response.status_code == 404 or get_response.status_code == 400,\\\n            f\"Deleted user still accessible: {get_response.status_code} {get_response.text}\"\n\n    finally:\n        # Cleanup: If user still exists, attempt to delete again\n        if created_user_id:\n            try:\n                requests.delete(\n                    f\"{BASE_URL}/api/admin/users/{created_user_id}\",\n                    auth=AUTH,\n                    headers=HEADERS,\n                    timeout=TIMEOUT\n                )\n            except Exception:\n                pass\n\n\ntest_delete_apiadminusersid_delete_user_by_id()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 67, in <module>\n  File \"<string>\", line 27, in test_delete_apiadminusersid_delete_user_by_id\nAssertionError: User creation failed: {\"error\":\"Unauthorized\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T10:17:44.363Z",
    "modified": "2025-10-08T10:18:17.004Z"
  },
  {
    "projectId": "f8d0cbdf-55fa-41e2-b875-d38006194387",
    "testId": "93133655-02c8-4abd-b0ed-4f1518e0a4d1",
    "userId": "64c80428-50b1-7024-fac8-0ba8c0dc95d6",
    "title": "TC006-get apiadmincompanies list all companies",
    "description": "Test the endpoint to list all companies and verify it returns the complete and correct list.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\ndef test_get_apiadmincompanies_list_all_companies():\n    base_url = \"http://localhost:3000\"\n    endpoint = \"/api/admin/companies\"\n\n    auth = HTTPBasicAuth(\"77kanish@gmail.com\", \"kanish@7.7\")\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    timeout = 30\n\n    try:\n        response = requests.get(f\"{base_url}{endpoint}\", auth=auth, headers=headers, timeout=timeout)\n        response.raise_for_status()\n        assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n\n        companies = response.json()\n        assert isinstance(companies, list), \"Response JSON is not a list\"\n        for company in companies:\n            assert isinstance(company, dict), \"Each company should be a dictionary\"\n            assert \"name\" in company, \"Company entry missing 'name'\"\n            # 'industry' and 'size' are optional by schema but often present; check if present\n            assert \"industry\" in company or True\n            assert \"size\" in company or True\n\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_get_apiadmincompanies_list_all_companies()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 16, in test_get_apiadmincompanies_list_all_companies\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/admin/companies\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 31, in <module>\n  File \"<string>\", line 29, in test_get_apiadmincompanies_list_all_companies\nAssertionError: Request failed: 401 Client Error: Unauthorized for url: http://localhost:3000/api/admin/companies\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T10:17:44.370Z",
    "modified": "2025-10-08T10:18:18.618Z"
  },
  {
    "projectId": "f8d0cbdf-55fa-41e2-b875-d38006194387",
    "testId": "81444b1c-2c4e-48a0-a445-8c8cf33d51ee",
    "userId": "64c80428-50b1-7024-fac8-0ba8c0dc95d6",
    "title": "TC007-post apiadmincompanies create new company",
    "description": "Test creating a new company with valid name, industry, and size, and verify the company is created successfully.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTOKEN = \"your_valid_access_token_here\"  # Replace with a valid JWT or access token\nTIMEOUT = 30\n\ndef test_post_apiadmincompanies_create_new_company():\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {TOKEN}\"\n    }\n    company_data = {\n        \"name\": \"Test Company TC007\",\n        \"industry\": \"Technology\",\n        \"size\": \"50-200\"\n    }\n\n    created_company_id = None\n\n    try:\n        # Create a new company\n        response = requests.post(\n            f\"{BASE_URL}/api/admin/companies\",\n            json=company_data,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert response.status_code == 201, f\"Expected 201 Created, got {response.status_code}\"\n        json_response = response.json()\n        assert \"id\" in json_response or \"_id\" in json_response, \"Response missing company ID\"\n        created_company_id = json_response.get(\"id\") or json_response.get(\"_id\")\n        # Validate returned data matches input closely (depending on API response structure)\n        # We'll check name, industry, and size\n        assert json_response.get(\"name\") == company_data[\"name\"], \"Mismatch in company name\"\n        assert json_response.get(\"industry\") == company_data[\"industry\"], \"Mismatch in industry\"\n        assert json_response.get(\"size\") == company_data[\"size\"], \"Mismatch in size\"\n    finally:\n        # Clean up - delete the created company if created\n        if created_company_id:\n            del_response = requests.delete(\n                f\"{BASE_URL}/api/admin/companies/{created_company_id}\",\n                headers=headers,\n                timeout=TIMEOUT\n            )\n            # Should be 200 OK or 204 No Content on successful deletion\n            assert del_response.status_code in (200, 204), f\"Failed to delete company {created_company_id}\"\n\ntest_post_apiadmincompanies_create_new_company()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 48, in <module>\n  File \"<string>\", line 28, in test_post_apiadmincompanies_create_new_company\nAssertionError: Expected 201 Created, got 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T10:17:44.375Z",
    "modified": "2025-10-08T10:18:48.119Z"
  },
  {
    "projectId": "f8d0cbdf-55fa-41e2-b875-d38006194387",
    "testId": "f0f92c06-dd77-4e63-b1ca-2f96a872c745",
    "userId": "64c80428-50b1-7024-fac8-0ba8c0dc95d6",
    "title": "TC008-get apiadmindepartments list all departments",
    "description": "Test the endpoint to list all departments and verify it returns the complete and correct list.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef test_get_apiadmindepartments_list_all_departments():\n    url = f\"{BASE_URL}/api/admin/departments\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n        response.raise_for_status()\n        departments = response.json()\n        assert isinstance(departments, list), \"Response should be a list\"\n        for dept in departments:\n            assert isinstance(dept, dict), \"Each department entry should be a dict\"\n            assert \"name\" in dept, \"Department entry missing 'name' field\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"HTTP request failed: {e}\"\n\ntest_get_apiadmindepartments_list_all_departments()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 10, in test_get_apiadmindepartments_list_all_departments\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/admin/departments\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 17, in test_get_apiadmindepartments_list_all_departments\nAssertionError: HTTP request failed: 401 Client Error: Unauthorized for url: http://localhost:3000/api/admin/departments\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T10:17:44.380Z",
    "modified": "2025-10-08T10:18:32.487Z"
  },
  {
    "projectId": "f8d0cbdf-55fa-41e2-b875-d38006194387",
    "testId": "e327202b-63ca-488a-a2f0-18ef18bfe4ec",
    "userId": "64c80428-50b1-7024-fac8-0ba8c0dc95d6",
    "title": "TC009-post apiadmindepartments create new department",
    "description": "Test creating a new department with valid name, company_id, and optional parent_id, and verify the department is created successfully.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nAUTH = (\"77kanish@gmail.com\", \"kanish@7.7\")\nHEADERS = {\n    \"Content-Type\": \"application/json\"\n}\nTIMEOUT = 30\n\ndef test_post_apiadmindepartments_create_new_department():\n    company_id = None\n    department_id = None\n    try:\n        # Step 1: Create a company to get a valid company_id\n        company_payload = {\n            \"name\": \"Test Company for Department\",\n            \"industry\": \"Technology\",\n            \"size\": \"50-100\"\n        }\n        company_response = requests.post(f\"{BASE_URL}/api/admin/companies\", auth=AUTH, headers=HEADERS, json=company_payload, timeout=TIMEOUT)\n        assert company_response.status_code == 201, f\"Failed to create company: {company_response.text}\"\n        company_data = company_response.json()\n        company_id = company_data.get(\"id\") or company_data.get(\"_id\")\n        assert company_id, \"Created company ID not found in response\"\n\n        # Step 2: Create a new department with the obtained company_id\n        department_payload = {\n            \"name\": \"Test Department\",\n            \"company_id\": company_id\n            # parent_id is optional, so omitted here\n        }\n        dept_response = requests.post(f\"{BASE_URL}/api/admin/departments\", auth=AUTH, headers=HEADERS, json=department_payload, timeout=TIMEOUT)\n        assert dept_response.status_code == 201, f\"Failed to create department: {dept_response.text}\"\n        dept_data = dept_response.json()\n        department_id = dept_data.get(\"id\") or dept_data.get(\"_id\")\n        assert department_id, \"Created department ID not found in response\"\n        assert dept_data.get(\"name\") == department_payload[\"name\"], \"Department name mismatch\"\n        assert dept_data.get(\"company_id\") == company_id, \"Department company_id mismatch\"\n\n    finally:\n        # Cleanup - delete the created department if exists\n        if department_id:\n            try:\n                del_dept_response = requests.delete(f\"{BASE_URL}/api/admin/departments/{department_id}\", auth=AUTH, timeout=TIMEOUT)\n                # Allow 200 or 204 as successful deletion responses\n                assert del_dept_response.status_code in [200, 204], f\"Failed to delete department: {del_dept_response.text}\"\n            except Exception:\n                pass\n        # Cleanup - delete the created company if exists\n        if company_id:\n            try:\n                del_comp_response = requests.delete(f\"{BASE_URL}/api/admin/companies/{company_id}\", auth=AUTH, timeout=TIMEOUT)\n                assert del_comp_response.status_code in [200, 204], f\"Failed to delete company: {del_comp_response.text}\"\n            except Exception:\n                pass\n\ntest_post_apiadmindepartments_create_new_department()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 57, in <module>\n  File \"<string>\", line 21, in test_post_apiadmindepartments_create_new_department\nAssertionError: Failed to create company: {\"success\":false,\"data\":null,\"error\":\"Authentication required\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T10:17:44.386Z",
    "modified": "2025-10-08T10:18:24.197Z"
  },
  {
    "projectId": "f8d0cbdf-55fa-41e2-b875-d38006194387",
    "testId": "4ee64680-3dfc-454d-be62-fc83dfca97fd",
    "userId": "64c80428-50b1-7024-fac8-0ba8c0dc95d6",
    "title": "TC010-get apidashboardcompanyadmin get company admin dashboard data",
    "description": "Test the company admin dashboard data endpoint to verify it returns relevant surveys, participation metrics, and recent activity data for the company admin role.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef test_get_company_admin_dashboard_data():\n    url = f\"{BASE_URL}/api/dashboard/company-admin\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Validate presence of expected keys related to dashboard data\n    expected_keys = [\"surveys\", \"participation_metrics\", \"recent_activity\"]\n    for key in expected_keys:\n        assert key in data, f\"Response JSON missing expected key: '{key}'\"\n\n    # Further validation of each key\n    # 'surveys' should be a list\n    assert isinstance(data[\"surveys\"], list), \"'surveys' should be a list\"\n    # 'participation_metrics' should be a dict (assuming metrics are key-value pairs)\n    assert isinstance(data[\"participation_metrics\"], dict), \"'participation_metrics' should be a dict\"\n    # 'recent_activity' should be a list\n    assert isinstance(data[\"recent_activity\"], list), \"'recent_activity' should be a list\"\n\ntest_get_company_admin_dashboard_data()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 13, in test_get_company_admin_dashboard_data\nAssertionError: Expected status code 200, got 403\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T10:17:44.392Z",
    "modified": "2025-10-08T10:18:55.890Z"
  }
]
